name: CI

on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions:
      actions: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.11'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - name: Cache dependencies
        uses: julia-actions/cache@v2

      - name: Install dependencies
        run: |
          julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'

      - name: Run tests with coverage
        run: |
          julia --project=test/ -e 'using Pkg; Pkg.test(coverage=true)'

      - name: Process coverage
        uses: julia-actions/julia-processcoverage@v1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      statuses: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1'

      - name: Cache dependencies
        uses: julia-actions/cache@v2

      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()

      - name: Build documentation
        uses: julia-actions/julia-buildpkg@v1

      - name: Deploy documentation
        uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}

      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using MyFirstPackage
          DocMeta.setdocmeta!(MyFirstPackage, :DocTestSetup, :(using MyFirstPackage); recursive=true)
          doctest(MyFirstPackage)